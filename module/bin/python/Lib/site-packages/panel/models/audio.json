{"code": "\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar p = require(\"core/properties\");\nvar widget_1 = require(\"models/widgets/widget\");\nvar AudioView = /** @class */ (function (_super) {\n    __extends(AudioView, _super);\n    function AudioView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AudioView.prototype.initialize = function (options) {\n        _super.prototype.initialize.call(this, options);\n        this._blocked = false;\n        this._time = Date.now();\n        this.render();\n    };\n    AudioView.prototype.connect_signals = function () {\n        var _this = this;\n        _super.prototype.connect_signals.call(this);\n        this.connect(this.model.change, function () { return _this.render(); });\n        this.connect(this.model.properties.loop.change, function () { return _this.set_loop(); });\n        this.connect(this.model.properties.paused.change, function () { return _this.set_paused(); });\n        this.connect(this.model.properties.time.change, function () { return _this.set_time(); });\n        this.connect(this.model.properties.value.change, function () { return _this.set_value(); });\n        this.connect(this.model.properties.volume.change, function () { return _this.set_volume(); });\n    };\n    AudioView.prototype.render = function () {\n        var _this = this;\n        if (this.audioEl) {\n            return;\n        }\n        this.audioEl = document.createElement('audio');\n        this.audioEl.controls = true;\n        this.audioEl.src = this.model.value;\n        this.audioEl.currentTime = this.model.time;\n        this.audioEl.loop = this.model.loop;\n        if (this.model.volume != null)\n            this.audioEl.volume = this.model.volume / 100;\n        else\n            this.model.volume = this.audioEl.volume * 100;\n        this.audioEl.onpause = function () { return _this.model.paused = true; };\n        this.audioEl.onplay = function () { return _this.model.play = true; };\n        this.audioEl.ontimeupdate = function () { return _this.update_time(_this); };\n        this.audioEl.onvolumechange = function () { return _this.update_volume(_this); };\n        this.el.appendChild(this.audioEl);\n        if (!this.model.paused)\n            this.audioEl.play();\n    };\n    AudioView.prototype.update_time = function (view) {\n        if ((Date.now() - view._time) < view.model.throttle) {\n            return;\n        }\n        view._blocked = true;\n        view.model.time = view.audioEl.currentTime;\n        view._time = Date.now();\n    };\n    AudioView.prototype.update_volume = function (view) {\n        view._blocked = true;\n        view.model.volume = view.audioEl.volume * 100;\n    };\n    AudioView.prototype.set_loop = function () {\n        this.audioEl.loop = this.model.loop;\n    };\n    AudioView.prototype.set_paused = function () {\n        if (!this.audioEl.paused && this.model.paused)\n            this.audioEl.pause();\n        if (this.audioEl.paused && !this.model.paused)\n            this.audioEl.play();\n    };\n    AudioView.prototype.set_volume = function () {\n        if (this._blocked)\n            this._blocked = false;\n        return;\n        this.audioEl.volume = this.model.volume / 100;\n    };\n    AudioView.prototype.set_time = function () {\n        if (this._blocked)\n            this._blocked = false;\n        return;\n        this.audioEl.currentTime = this.model.time;\n    };\n    AudioView.prototype.set_value = function () {\n        this.audioEl.src = this.model.value;\n    };\n    return AudioView;\n}(widget_1.WidgetView));\nexports.AudioView = AudioView;\nvar Audio = /** @class */ (function (_super) {\n    __extends(Audio, _super);\n    function Audio(attrs) {\n        return _super.call(this, attrs) || this;\n    }\n    Audio.initClass = function () {\n        this.prototype.type = \"Audio\";\n        this.prototype.default_view = AudioView;\n        this.define({\n            loop: [p.Bool, false],\n            paused: [p.Bool, true],\n            time: [p.Number, 0],\n            throttle: [p.Number, 250],\n            value: [p.Any, ''],\n            volume: [p.Number, null],\n        });\n    };\n    return Audio;\n}(widget_1.Widget));\nexports.Audio = Audio;\nAudio.initClass();\n", "deps": ["core/properties", "models/widgets/widget"], "hash": "b032e8168c1d7d75614365bb4d610ba74c163c0579878b300fddbe10aa818d0d"}