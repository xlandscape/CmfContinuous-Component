# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hdfext')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hdfext')
    _hdfext = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hdfext', [dirname(__file__)])
        except ImportError:
            import _hdfext
            return _hdfext
        try:
            _mod = imp.load_module('_hdfext', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hdfext = swig_import_helper()
    del swig_import_helper
else:
    import _hdfext
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

DFNT_NONE = _hdfext.DFNT_NONE
DFNT_QUERY = _hdfext.DFNT_QUERY
DFNT_VERSION = _hdfext.DFNT_VERSION
DFNT_FLOAT32 = _hdfext.DFNT_FLOAT32
DFNT_FLOAT = _hdfext.DFNT_FLOAT
DFNT_FLOAT64 = _hdfext.DFNT_FLOAT64
DFNT_DOUBLE = _hdfext.DFNT_DOUBLE
DFNT_FLOAT128 = _hdfext.DFNT_FLOAT128
DFNT_INT8 = _hdfext.DFNT_INT8
DFNT_UINT8 = _hdfext.DFNT_UINT8
DFNT_INT16 = _hdfext.DFNT_INT16
DFNT_UINT16 = _hdfext.DFNT_UINT16
DFNT_INT32 = _hdfext.DFNT_INT32
DFNT_UINT32 = _hdfext.DFNT_UINT32
DFNT_INT64 = _hdfext.DFNT_INT64
DFNT_UINT64 = _hdfext.DFNT_UINT64
DFNT_INT128 = _hdfext.DFNT_INT128
DFNT_UINT128 = _hdfext.DFNT_UINT128
DFNT_UCHAR8 = _hdfext.DFNT_UCHAR8
DFNT_UCHAR = _hdfext.DFNT_UCHAR
DFNT_CHAR8 = _hdfext.DFNT_CHAR8
DFNT_CHAR = _hdfext.DFNT_CHAR
DFNT_CHAR16 = _hdfext.DFNT_CHAR16
DFNT_UCHAR16 = _hdfext.DFNT_UCHAR16
SD_UNLIMITED = _hdfext.SD_UNLIMITED
SD_FILL = _hdfext.SD_FILL
SD_NOFILL = _hdfext.SD_NOFILL
CHAR_BUFFER_SIZE = _hdfext.CHAR_BUFFER_SIZE
ATTRIB_BUFFER_SIZE = _hdfext.ATTRIB_BUFFER_SIZE
DFACC_READ = _hdfext.DFACC_READ
DFACC_WRITE = _hdfext.DFACC_WRITE
DFACC_CREATE = _hdfext.DFACC_CREATE
DFACC_ALL = _hdfext.DFACC_ALL
DFACC_RDONLY = _hdfext.DFACC_RDONLY
DFACC_RDWR = _hdfext.DFACC_RDWR
DFACC_CLOBBER = _hdfext.DFACC_CLOBBER
DFACC_BUFFER = _hdfext.DFACC_BUFFER
DFACC_APPENDABLE = _hdfext.DFACC_APPENDABLE
DFACC_CURRENT = _hdfext.DFACC_CURRENT
DFACC_OLD = _hdfext.DFACC_OLD
COMP_CODE_NONE = _hdfext.COMP_CODE_NONE
COMP_CODE_RLE = _hdfext.COMP_CODE_RLE
COMP_CODE_NBIT = _hdfext.COMP_CODE_NBIT
COMP_CODE_SKPHUFF = _hdfext.COMP_CODE_SKPHUFF
COMP_CODE_DEFLATE = _hdfext.COMP_CODE_DEFLATE
COMP_CODE_SZIP = _hdfext.COMP_CODE_SZIP
DFTAG_NDG = _hdfext.DFTAG_NDG
DFTAG_VH = _hdfext.DFTAG_VH
DFTAG_VG = _hdfext.DFTAG_VG
H4_MAX_VAR_DIMS = _hdfext.H4_MAX_VAR_DIMS
class array_byte(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_byte, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_byte, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _hdfext.new_array_byte(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdfext.delete_array_byte
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _hdfext.array_byte___getitem__(self, index)

    def __setitem__(self, index, value):
        return _hdfext.array_byte___setitem__(self, index, value)

    def cast(self):
        return _hdfext.array_byte_cast(self)
    if _newclass:
        frompointer = staticmethod(_hdfext.array_byte_frompointer)
    else:
        frompointer = _hdfext.array_byte_frompointer
array_byte_swigregister = _hdfext.array_byte_swigregister
array_byte_swigregister(array_byte)

def array_byte_frompointer(t):
    return _hdfext.array_byte_frompointer(t)
array_byte_frompointer = _hdfext.array_byte_frompointer

class array_int8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_int8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_int8, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _hdfext.new_array_int8(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdfext.delete_array_int8
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _hdfext.array_int8___getitem__(self, index)

    def __setitem__(self, index, value):
        return _hdfext.array_int8___setitem__(self, index, value)

    def cast(self):
        return _hdfext.array_int8_cast(self)
    if _newclass:
        frompointer = staticmethod(_hdfext.array_int8_frompointer)
    else:
        frompointer = _hdfext.array_int8_frompointer
array_int8_swigregister = _hdfext.array_int8_swigregister
array_int8_swigregister(array_int8)

def array_int8_frompointer(t):
    return _hdfext.array_int8_frompointer(t)
array_int8_frompointer = _hdfext.array_int8_frompointer

class array_int16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_int16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_int16, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _hdfext.new_array_int16(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdfext.delete_array_int16
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _hdfext.array_int16___getitem__(self, index)

    def __setitem__(self, index, value):
        return _hdfext.array_int16___setitem__(self, index, value)

    def cast(self):
        return _hdfext.array_int16_cast(self)
    if _newclass:
        frompointer = staticmethod(_hdfext.array_int16_frompointer)
    else:
        frompointer = _hdfext.array_int16_frompointer
array_int16_swigregister = _hdfext.array_int16_swigregister
array_int16_swigregister(array_int16)

def array_int16_frompointer(t):
    return _hdfext.array_int16_frompointer(t)
array_int16_frompointer = _hdfext.array_int16_frompointer

class array_uint16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_uint16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_uint16, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _hdfext.new_array_uint16(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdfext.delete_array_uint16
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _hdfext.array_uint16___getitem__(self, index)

    def __setitem__(self, index, value):
        return _hdfext.array_uint16___setitem__(self, index, value)

    def cast(self):
        return _hdfext.array_uint16_cast(self)
    if _newclass:
        frompointer = staticmethod(_hdfext.array_uint16_frompointer)
    else:
        frompointer = _hdfext.array_uint16_frompointer
array_uint16_swigregister = _hdfext.array_uint16_swigregister
array_uint16_swigregister(array_uint16)

def array_uint16_frompointer(t):
    return _hdfext.array_uint16_frompointer(t)
array_uint16_frompointer = _hdfext.array_uint16_frompointer

class array_int32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_int32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_int32, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _hdfext.new_array_int32(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdfext.delete_array_int32
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _hdfext.array_int32___getitem__(self, index)

    def __setitem__(self, index, value):
        return _hdfext.array_int32___setitem__(self, index, value)

    def cast(self):
        return _hdfext.array_int32_cast(self)
    if _newclass:
        frompointer = staticmethod(_hdfext.array_int32_frompointer)
    else:
        frompointer = _hdfext.array_int32_frompointer
array_int32_swigregister = _hdfext.array_int32_swigregister
array_int32_swigregister(array_int32)

def array_int32_frompointer(t):
    return _hdfext.array_int32_frompointer(t)
array_int32_frompointer = _hdfext.array_int32_frompointer

class array_uint32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_uint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_uint32, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _hdfext.new_array_uint32(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdfext.delete_array_uint32
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _hdfext.array_uint32___getitem__(self, index)

    def __setitem__(self, index, value):
        return _hdfext.array_uint32___setitem__(self, index, value)

    def cast(self):
        return _hdfext.array_uint32_cast(self)
    if _newclass:
        frompointer = staticmethod(_hdfext.array_uint32_frompointer)
    else:
        frompointer = _hdfext.array_uint32_frompointer
array_uint32_swigregister = _hdfext.array_uint32_swigregister
array_uint32_swigregister(array_uint32)

def array_uint32_frompointer(t):
    return _hdfext.array_uint32_frompointer(t)
array_uint32_frompointer = _hdfext.array_uint32_frompointer

class array_float32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_float32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_float32, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _hdfext.new_array_float32(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdfext.delete_array_float32
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _hdfext.array_float32___getitem__(self, index)

    def __setitem__(self, index, value):
        return _hdfext.array_float32___setitem__(self, index, value)

    def cast(self):
        return _hdfext.array_float32_cast(self)
    if _newclass:
        frompointer = staticmethod(_hdfext.array_float32_frompointer)
    else:
        frompointer = _hdfext.array_float32_frompointer
array_float32_swigregister = _hdfext.array_float32_swigregister
array_float32_swigregister(array_float32)

def array_float32_frompointer(t):
    return _hdfext.array_float32_frompointer(t)
array_float32_frompointer = _hdfext.array_float32_frompointer

class array_float64(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, array_float64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, array_float64, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _hdfext.new_array_float64(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hdfext.delete_array_float64
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _hdfext.array_float64___getitem__(self, index)

    def __setitem__(self, index, value):
        return _hdfext.array_float64___setitem__(self, index, value)

    def cast(self):
        return _hdfext.array_float64_cast(self)
    if _newclass:
        frompointer = staticmethod(_hdfext.array_float64_frompointer)
    else:
        frompointer = _hdfext.array_float64_frompointer
array_float64_swigregister = _hdfext.array_float64_swigregister
array_float64_swigregister(array_float64)

def array_float64_frompointer(t):
    return _hdfext.array_float64_frompointer(t)
array_float64_frompointer = _hdfext.array_float64_frompointer


def new_array_voidp(nelements):
    return _hdfext.new_array_voidp(nelements)
new_array_voidp = _hdfext.new_array_voidp

def delete_array_voidp(ary):
    return _hdfext.delete_array_voidp(ary)
delete_array_voidp = _hdfext.delete_array_voidp

def array_voidp_getitem(ary, index):
    return _hdfext.array_voidp_getitem(ary, index)
array_voidp_getitem = _hdfext.array_voidp_getitem

def array_voidp_setitem(ary, index, value):
    return _hdfext.array_voidp_setitem(ary, index, value)
array_voidp_setitem = _hdfext.array_voidp_setitem

def Hopen(filename, access_mode, num_dds_blocks):
    return _hdfext.Hopen(filename, access_mode, num_dds_blocks)
Hopen = _hdfext.Hopen

def Hclose(file_id):
    return _hdfext.Hclose(file_id)
Hclose = _hdfext.Hclose

def Hgetlibversion():
    return _hdfext.Hgetlibversion()
Hgetlibversion = _hdfext.Hgetlibversion

def Hgetfileversion(file_id):
    return _hdfext.Hgetfileversion(file_id)
Hgetfileversion = _hdfext.Hgetfileversion

def Hishdf(filename):
    return _hdfext.Hishdf(filename)
Hishdf = _hdfext.Hishdf

def HEvalue(error_stack_offset):
    return _hdfext.HEvalue(error_stack_offset)
HEvalue = _hdfext.HEvalue

def HEstring(error_code):
    return _hdfext.HEstring(error_code)
HEstring = _hdfext.HEstring

def _HEprint():
    return _hdfext._HEprint()
_HEprint = _hdfext._HEprint

def _SDreaddata_0(sds_id, data_type, start, edges, stride):
    return _hdfext._SDreaddata_0(sds_id, data_type, start, edges, stride)
_SDreaddata_0 = _hdfext._SDreaddata_0

def _SDwritedata_0(sds_id, data_type, start, edges, data, stride):
    return _hdfext._SDwritedata_0(sds_id, data_type, start, edges, data, stride)
_SDwritedata_0 = _hdfext._SDwritedata_0

def SDstart(filename, access_mode):
    return _hdfext.SDstart(filename, access_mode)
SDstart = _hdfext.SDstart

def SDcreate(sd_id, sds_name, data_type, rank, dim_sizes):
    return _hdfext.SDcreate(sd_id, sds_name, data_type, rank, dim_sizes)
SDcreate = _hdfext.SDcreate

def SDselect(sd_id, sds_index):
    return _hdfext.SDselect(sd_id, sds_index)
SDselect = _hdfext.SDselect

def SDendaccess(sds_id):
    return _hdfext.SDendaccess(sds_id)
SDendaccess = _hdfext.SDendaccess

def SDend(sd_id):
    return _hdfext.SDend(sd_id)
SDend = _hdfext.SDend

def SDfileinfo(sd_id):
    return _hdfext.SDfileinfo(sd_id)
SDfileinfo = _hdfext.SDfileinfo

def SDgetinfo(sds_id, buf):
    return _hdfext.SDgetinfo(sds_id, buf)
SDgetinfo = _hdfext.SDgetinfo

def SDcheckempty(sds_id):
    return _hdfext.SDcheckempty(sds_id)
SDcheckempty = _hdfext.SDcheckempty

def SDidtoref(sds_id):
    return _hdfext.SDidtoref(sds_id)
SDidtoref = _hdfext.SDidtoref

def SDiscoordvar(sds_id):
    return _hdfext.SDiscoordvar(sds_id)
SDiscoordvar = _hdfext.SDiscoordvar

def SDisrecord(sds_id):
    return _hdfext.SDisrecord(sds_id)
SDisrecord = _hdfext.SDisrecord

def SDnametoindex(sd_id, sds_name):
    return _hdfext.SDnametoindex(sd_id, sds_name)
SDnametoindex = _hdfext.SDnametoindex

def SDreftoindex(sd_id, sds_ref):
    return _hdfext.SDreftoindex(sd_id, sds_ref)
SDreftoindex = _hdfext.SDreftoindex

def SDdiminfo(dim_id):
    return _hdfext.SDdiminfo(dim_id)
SDdiminfo = _hdfext.SDdiminfo

def SDgetdimid(sds_id, dim_index):
    return _hdfext.SDgetdimid(sds_id, dim_index)
SDgetdimid = _hdfext.SDgetdimid

def SDsetdimname(dim_id, dim_name):
    return _hdfext.SDsetdimname(dim_id, dim_name)
SDsetdimname = _hdfext.SDsetdimname

def SDgetdimscale(dim_id, buf):
    return _hdfext.SDgetdimscale(dim_id, buf)
SDgetdimscale = _hdfext.SDgetdimscale

def SDsetdimscale(dim_id, n_values, data_type, buf):
    return _hdfext.SDsetdimscale(dim_id, n_values, data_type, buf)
SDsetdimscale = _hdfext.SDsetdimscale

def SDattrinfo(obj_id, attr_index):
    return _hdfext.SDattrinfo(obj_id, attr_index)
SDattrinfo = _hdfext.SDattrinfo

def SDfindattr(obj_id, attr_name):
    return _hdfext.SDfindattr(obj_id, attr_name)
SDfindattr = _hdfext.SDfindattr

def SDreadattr(obj_id, attr_index, buf):
    return _hdfext.SDreadattr(obj_id, attr_index, buf)
SDreadattr = _hdfext.SDreadattr

def SDsetattr(obj_id, attr_name, data_type, n_values, values):
    return _hdfext.SDsetattr(obj_id, attr_name, data_type, n_values, values)
SDsetattr = _hdfext.SDsetattr

def SDgetcal(sds_id):
    return _hdfext.SDgetcal(sds_id)
SDgetcal = _hdfext.SDgetcal

def SDgetdatastrs(sds_id, len):
    return _hdfext.SDgetdatastrs(sds_id, len)
SDgetdatastrs = _hdfext.SDgetdatastrs

def SDgetdimstrs(sds_id, len):
    return _hdfext.SDgetdimstrs(sds_id, len)
SDgetdimstrs = _hdfext.SDgetdimstrs

def SDgetfillvalue(sds_id, buf):
    return _hdfext.SDgetfillvalue(sds_id, buf)
SDgetfillvalue = _hdfext.SDgetfillvalue

def SDgetrange(sds_id, buf1, buf2):
    return _hdfext.SDgetrange(sds_id, buf1, buf2)
SDgetrange = _hdfext.SDgetrange

def SDsetcal(sds_id, cal, cal_error, offset, offset_err, data_type):
    return _hdfext.SDsetcal(sds_id, cal, cal_error, offset, offset_err, data_type)
SDsetcal = _hdfext.SDsetcal

def SDsetdatastrs(sds_id, label, unit, format, coord_system):
    return _hdfext.SDsetdatastrs(sds_id, label, unit, format, coord_system)
SDsetdatastrs = _hdfext.SDsetdatastrs

def SDsetdimstrs(sds_id, label, unit, format):
    return _hdfext.SDsetdimstrs(sds_id, label, unit, format)
SDsetdimstrs = _hdfext.SDsetdimstrs

def SDsetfillmode(sd_id, fill_mode):
    return _hdfext.SDsetfillmode(sd_id, fill_mode)
SDsetfillmode = _hdfext.SDsetfillmode

def SDsetfillvalue(sds_id, fill_val):
    return _hdfext.SDsetfillvalue(sds_id, fill_val)
SDsetfillvalue = _hdfext.SDsetfillvalue

def SDsetrange(sds_id, max, min):
    return _hdfext.SDsetrange(sds_id, max, min)
SDsetrange = _hdfext.SDsetrange

def _SDgetcompress(sds_id):
    return _hdfext._SDgetcompress(sds_id)
_SDgetcompress = _hdfext._SDgetcompress

def _SDsetcompress(sds_id, comp_type, value, v2):
    return _hdfext._SDsetcompress(sds_id, comp_type, value, v2)
_SDsetcompress = _hdfext._SDsetcompress

def SDsetexternalfile(sds_id, filename, offset):
    return _hdfext.SDsetexternalfile(sds_id, filename, offset)
SDsetexternalfile = _hdfext.SDsetexternalfile

def Vinitialize(file_id):
    return _hdfext.Vinitialize(file_id)
Vinitialize = _hdfext.Vinitialize

def VSattach(file_id, vdata_ref, vdata_access_mode):
    return _hdfext.VSattach(file_id, vdata_ref, vdata_access_mode)
VSattach = _hdfext.VSattach

def VSdetach(vdata_id):
    return _hdfext.VSdetach(vdata_id)
VSdetach = _hdfext.VSdetach

def Vfinish(file_id):
    return _hdfext.Vfinish(file_id)
Vfinish = _hdfext.Vfinish

def VHstoredata(file_id, fieldname, buf, n_records, data_type, vdata_name, vdata_class):
    return _hdfext.VHstoredata(file_id, fieldname, buf, n_records, data_type, vdata_name, vdata_class)
VHstoredata = _hdfext.VHstoredata

def VHstoredatam(file_id, fieldname, buf, n_records, data_type, vdata_name, vdata_class, order):
    return _hdfext.VHstoredatam(file_id, fieldname, buf, n_records, data_type, vdata_name, vdata_class, order)
VHstoredatam = _hdfext.VHstoredatam

def VSfdefine(vdata_id, fieldname, data_type, order):
    return _hdfext.VSfdefine(vdata_id, fieldname, data_type, order)
VSfdefine = _hdfext.VSfdefine

def VSsetfields(vdata_id, fieldname_list):
    return _hdfext.VSsetfields(vdata_id, fieldname_list)
VSsetfields = _hdfext.VSsetfields

def VSseek(vdata_id, record_index):
    return _hdfext.VSseek(vdata_id, record_index)
VSseek = _hdfext.VSseek

def VSread(vdata_id, databuf, n_records, interlace_mode):
    return _hdfext.VSread(vdata_id, databuf, n_records, interlace_mode)
VSread = _hdfext.VSread

def VSwrite(vdata_id, databuf, n_records, interlace_mode):
    return _hdfext.VSwrite(vdata_id, databuf, n_records, interlace_mode)
VSwrite = _hdfext.VSwrite

def VSfpack(vdata_id, action, fields_in_buf, buf, buf_size, n_records, fieldname_list, bufptrs):
    return _hdfext.VSfpack(vdata_id, action, fields_in_buf, buf, buf_size, n_records, fieldname_list, bufptrs)
VSfpack = _hdfext.VSfpack

def VSelts(vdata_id):
    return _hdfext.VSelts(vdata_id)
VSelts = _hdfext.VSelts

def VSgetclass(vdata_id):
    return _hdfext.VSgetclass(vdata_id)
VSgetclass = _hdfext.VSgetclass

def VSgetfields(vdata_id):
    return _hdfext.VSgetfields(vdata_id)
VSgetfields = _hdfext.VSgetfields

def VSgetinterlace(vdata_id):
    return _hdfext.VSgetinterlace(vdata_id)
VSgetinterlace = _hdfext.VSgetinterlace

def VSgetname(vdata_id):
    return _hdfext.VSgetname(vdata_id)
VSgetname = _hdfext.VSgetname

def VSsizeof(vdata_id, fieldname_list):
    return _hdfext.VSsizeof(vdata_id, fieldname_list)
VSsizeof = _hdfext.VSsizeof

def VSinquire(vdata_id):
    return _hdfext.VSinquire(vdata_id)
VSinquire = _hdfext.VSinquire

def VSQuerytag(vdata_id):
    return _hdfext.VSQuerytag(vdata_id)
VSQuerytag = _hdfext.VSQuerytag

def VSQueryref(vdata_id):
    return _hdfext.VSQueryref(vdata_id)
VSQueryref = _hdfext.VSQueryref

def VSfindex(vdata_id, field_name):
    return _hdfext.VSfindex(vdata_id, field_name)
VSfindex = _hdfext.VSfindex

def VSisattr(vdta_id):
    return _hdfext.VSisattr(vdta_id)
VSisattr = _hdfext.VSisattr

def VFnfields(vdata_id):
    return _hdfext.VFnfields(vdata_id)
VFnfields = _hdfext.VFnfields

def VFfieldtype(vdata_id, field_index):
    return _hdfext.VFfieldtype(vdata_id, field_index)
VFfieldtype = _hdfext.VFfieldtype

def VFfieldname(vdata_id, field_index):
    return _hdfext.VFfieldname(vdata_id, field_index)
VFfieldname = _hdfext.VFfieldname

def VFfieldesize(vdata_id, field_index):
    return _hdfext.VFfieldesize(vdata_id, field_index)
VFfieldesize = _hdfext.VFfieldesize

def VFfieldisize(vdata_id, field_index):
    return _hdfext.VFfieldisize(vdata_id, field_index)
VFfieldisize = _hdfext.VFfieldisize

def VFfieldorder(vdata_id, field_index):
    return _hdfext.VFfieldorder(vdata_id, field_index)
VFfieldorder = _hdfext.VFfieldorder

def VSfind(file_id, vdata_name):
    return _hdfext.VSfind(file_id, vdata_name)
VSfind = _hdfext.VSfind

def VSgetid(file_id, vdata_ref):
    return _hdfext.VSgetid(file_id, vdata_ref)
VSgetid = _hdfext.VSgetid

def VSfexist(vdata_id, fieldname_list):
    return _hdfext.VSfexist(vdata_id, fieldname_list)
VSfexist = _hdfext.VSfexist

def VSsetclass(vdata_id, vdata_class):
    return _hdfext.VSsetclass(vdata_id, vdata_class)
VSsetclass = _hdfext.VSsetclass

def VSsetname(vdata_id, vdata_name):
    return _hdfext.VSsetname(vdata_id, vdata_name)
VSsetname = _hdfext.VSsetname

def VSsetinterlace(vdata_id, interlace_mode):
    return _hdfext.VSsetinterlace(vdata_id, interlace_mode)
VSsetinterlace = _hdfext.VSsetinterlace

def VSsetattr(vdata_id, field_index, attr_name, data_type, n_values, values):
    return _hdfext.VSsetattr(vdata_id, field_index, attr_name, data_type, n_values, values)
VSsetattr = _hdfext.VSsetattr

def VSgetattr(vdata_id, field_index, attr_index, buf):
    return _hdfext.VSgetattr(vdata_id, field_index, attr_index, buf)
VSgetattr = _hdfext.VSgetattr

def VSfnattrs(vdata_id, field_index):
    return _hdfext.VSfnattrs(vdata_id, field_index)
VSfnattrs = _hdfext.VSfnattrs

def VSnattrs(vdata_id):
    return _hdfext.VSnattrs(vdata_id)
VSnattrs = _hdfext.VSnattrs

def VSattrinfo(vdata_id, field_index, attr_index):
    return _hdfext.VSattrinfo(vdata_id, field_index, attr_index)
VSattrinfo = _hdfext.VSattrinfo

def VSfindattr(vdata_id, field_index, attr_name):
    return _hdfext.VSfindattr(vdata_id, field_index, attr_name)
VSfindattr = _hdfext.VSfindattr

def Vattach(file_id, vgroup_ref, vg_access_mode):
    return _hdfext.Vattach(file_id, vgroup_ref, vg_access_mode)
Vattach = _hdfext.Vattach

def Vdetach(vgroup_id):
    return _hdfext.Vdetach(vgroup_id)
Vdetach = _hdfext.Vdetach

def Vgetname(vgroup_id):
    return _hdfext.Vgetname(vgroup_id)
Vgetname = _hdfext.Vgetname

def Vsetname(vgroup_id, vgroup_name):
    return _hdfext.Vsetname(vgroup_id, vgroup_name)
Vsetname = _hdfext.Vsetname

def Vgetclass(vgroup_id):
    return _hdfext.Vgetclass(vgroup_id)
Vgetclass = _hdfext.Vgetclass

def Vsetclass(vgroup_id, vgroup_class):
    return _hdfext.Vsetclass(vgroup_id, vgroup_class)
Vsetclass = _hdfext.Vsetclass

def Vfind(file_id, vgroup_name):
    return _hdfext.Vfind(file_id, vgroup_name)
Vfind = _hdfext.Vfind

def Vfindclass(file_id, vgroup_class):
    return _hdfext.Vfindclass(file_id, vgroup_class)
Vfindclass = _hdfext.Vfindclass

def Vinsert(vgroup_id, v_id):
    return _hdfext.Vinsert(vgroup_id, v_id)
Vinsert = _hdfext.Vinsert

def Vaddtagref(vgroup_id, obj_tag, obj_ref):
    return _hdfext.Vaddtagref(vgroup_id, obj_tag, obj_ref)
Vaddtagref = _hdfext.Vaddtagref

def Vdeletetagref(vgroup_id, obj_tag, obj_ref):
    return _hdfext.Vdeletetagref(vgroup_id, obj_tag, obj_ref)
Vdeletetagref = _hdfext.Vdeletetagref

def Vdelete(file_id, vgroup_id):
    return _hdfext.Vdelete(file_id, vgroup_id)
Vdelete = _hdfext.Vdelete

def VQueryref(vgroup_id):
    return _hdfext.VQueryref(vgroup_id)
VQueryref = _hdfext.VQueryref

def VQuerytag(vgroup_id):
    return _hdfext.VQuerytag(vgroup_id)
VQuerytag = _hdfext.VQuerytag

def Vntagrefs(vgroup_id):
    return _hdfext.Vntagrefs(vgroup_id)
Vntagrefs = _hdfext.Vntagrefs

def Vgettagref(vgroup_id, index):
    return _hdfext.Vgettagref(vgroup_id, index)
Vgettagref = _hdfext.Vgettagref

def Vgetversion(vgroup_id):
    return _hdfext.Vgetversion(vgroup_id)
Vgetversion = _hdfext.Vgetversion

def Vgettagrefs(vgroup_id, tag_attay, ref_array, maxsize):
    return _hdfext.Vgettagrefs(vgroup_id, tag_attay, ref_array, maxsize)
Vgettagrefs = _hdfext.Vgettagrefs

def Vgetid(file_id, vgroup_ref):
    return _hdfext.Vgetid(file_id, vgroup_ref)
Vgetid = _hdfext.Vgetid

def Vinqtagref(vgroup_id, tag, ref):
    return _hdfext.Vinqtagref(vgroup_id, tag, ref)
Vinqtagref = _hdfext.Vinqtagref

def Visvg(vgroup_id, obj_ref):
    return _hdfext.Visvg(vgroup_id, obj_ref)
Visvg = _hdfext.Visvg

def Visvs(vgroup_id, obj_ref):
    return _hdfext.Visvs(vgroup_id, obj_ref)
Visvs = _hdfext.Visvs

def Vnrefs(vgroup_id, tag_type):
    return _hdfext.Vnrefs(vgroup_id, tag_type)
Vnrefs = _hdfext.Vnrefs

def Vfindattr(vgroup_id, attr_name):
    return _hdfext.Vfindattr(vgroup_id, attr_name)
Vfindattr = _hdfext.Vfindattr

def Vgetattr(vdata_id, attr_index, buf):
    return _hdfext.Vgetattr(vdata_id, attr_index, buf)
Vgetattr = _hdfext.Vgetattr

def Vsetattr(vgroup_id, attr_name, data_type, n_values, values):
    return _hdfext.Vsetattr(vgroup_id, attr_name, data_type, n_values, values)
Vsetattr = _hdfext.Vsetattr

def Vattrinfo(vgroup_id, attr_index):
    return _hdfext.Vattrinfo(vgroup_id, attr_index)
Vattrinfo = _hdfext.Vattrinfo

def Vnattrs(vgroup_id):
    return _hdfext.Vnattrs(vgroup_id)
Vnattrs = _hdfext.Vnattrs
# This file is compatible with both classic and new-style classes.


